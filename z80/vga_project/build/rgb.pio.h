// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// rgb //
// --- //

#define rgb_wrap_target 1
#define rgb_wrap 4

static const uint16_t rgb_program_instructions[] = {
    0xc027, //  0: irq    wait 7                     
            //     .wrap_target
    0x6008, //  1: out    pins, 8                    
    0x6008, //  2: out    pins, 8                    
    0x6008, //  3: out    pins, 8                    
    0x6008, //  4: out    pins, 8                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program rgb_program = {
    .instructions = rgb_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config rgb_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + rgb_wrap_target, offset + rgb_wrap);
    return c;
}

static inline void rgb_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
	pio_sm_config c = rgb_program_get_default_config(offset);
	//config, base, num
	sm_config_set_out_pins(&c, pin,8);
	sm_config_set_clkdiv(&c, freq);
	//connect pins to this pio
	for (int i=0;i<8;i++) pio_gpio_init(pio, pin+i);
	pio_sm_set_consecutive_pindirs(pio, sm, pin, 8, true);
	sm_config_set_out_shift(&c, true, true, 32);
	//init on pio
	pio_sm_init(pio, sm, offset, &c);
	//start
}

#endif

