The text widget is powerful, but its use boils down to two concepts. The first is that it's contents are simple strings. 

The second concept is string positions

END is the end of the string, 
INSERT is where the cursor currently is
SEL is the current selection

Positions are denoted in a row/column format. 

row.col. 

1.0 selects the first row and the first column. Rows start at 1, columns start at 0

You can do math with positions. 

END+'-1c' 

Means the end of the string widget - 1 column - which coincidentally strips the last carachter from the widget

END-'1'

Selects the row prior to the end

You can select to the nearest word with

INSERT-'wordstarts'

or the line with

INSERT+'lineend'

MARKS - marks are important. They give you a mark that always refers to the place in the string where it was set,
regardless of insertion or deletion. You create marks with a text.mark_set() call. Marks are strings.

self.text.mark_set(INSERT, '1.0') - this sets the INSERT mark to be the first row, and INSERT will always refer to this.

self.text.mark_set('linetwo', '2.0') - This mark will always refer to what was at line two, no matter if you insert or delete text. 

mark.unset will delete marks by name when they are no longer needed. 

TAGS

Tags can be passed into position based calls. 

This brings up the SEL selector. 

SEL_FIRST and SEL_LAST used in combinations with a get will select the currently selected text. 

self.text.tag_add('alltext', '1.0', END) - tags all text
self.text.tag_add(SEL, '1.0', '1.8) - sets the current selection.
self.text.tag_remove(SEL, '1.0', END) - deselects all text

You should use text.delete() to remove text from the widget, and tag_delete() to remove a tag completely

The following example will use the search function to tag a term that is found:

where = self.text.search(target, INSERT, END) # searches from the mark INSERT (location of the cursor) to the end of the text. Returns a mark (which is a position)
pastit = where + ('+%dc' % len(target)) # This does math as shown above to positions, which makes an index at the end of the search term
self.text.tag_add(SEL, where, pastit) #sets the selection (highlighting the text)
self.text.focus() #Sets focus on the text widget itself so you can start typing

The downside to this code is that it adds a selection. You should call the previously mentioned tag_remove(SEL, '1.0', END) to remove all other selections first. 

Another cool function that can use marks, tags, and positions is see, it scrolls the widget so that the position passed into it is visible.

see('1.0')
see(INSERT)
see(SEL_FIRST)

Its time to put these things into practice, see simpleedit.py. My simpleedit.py is a culmination of the notes I have taken so far. Here goes nothing.

Ok, back for one more thing. You can add actions and bind events to tags. You can insert buttons, other widgets, anything you may want. Text is a very, very powerful tool.


